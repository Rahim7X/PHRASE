#!/bin/python3
import os
import json
import argparse
import pyperclip
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes

# Function to get the directory of the current script
def get_script_dir():
    return os.path.dirname(os.path.abspath(__file__))

# Function to create a new vault
def create_vault(common_password):
    db_path = os.path.join(get_script_dir(), 'db.json')
    if not os.path.exists(db_path):
        with open(db_path, 'w') as db_file:
            json.dump({}, db_file)
        print(f"Vault created at: {db_path}")
    else:
        print("Vault already exists.")

# Function to encrypt data
def encrypt(data, common_password):
    salt = get_random_bytes(16)
    key = PBKDF2(common_password, salt, dkLen=32)
    cipher = AES.new(key, AES.MODE_CBC)
    iv = cipher.iv
    ciphertext = cipher.encrypt(pad(data.encode(), AES.block_size))
    return {
        'iv': iv.hex(),
        'salt': salt.hex(),
        'ciphertext': ciphertext.hex()
    }

# Function to decrypt data
def decrypt(encrypted_data, common_password):
    try:
        iv = bytes.fromhex(encrypted_data['iv'])
        salt = bytes.fromhex(encrypted_data['salt'])
        ciphertext = bytes.fromhex(encrypted_data['ciphertext'])
        key = PBKDF2(common_password, salt, dkLen=32)
        cipher = AES.new(key, AES.MODE_CBC, iv=iv)
        decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return decrypted.decode()
    except (ValueError, KeyError) as e:
        print("Decryption failed:", e)
        return None

# Function to add credentials
def add_credentials(alias, username, password, common_password):
    db_path = os.path.join(get_script_dir(), 'db.json')
    with open(db_path, 'r') as db_file:
        data = json.load(db_file)

    if alias in data:
        print(f"Alias '{alias}' already exists. Please choose a different alias.")
        return

    encrypted_password = encrypt(password, common_password)
    data[alias] = {
        'username': username,
        'password': encrypted_password
    }
    with open(db_path, 'w') as db_file:
        json.dump(data, db_file)
    print(f"Credentials added for alias: {alias}")

# Function to get credentials
def get_credentials(alias, common_password):
    db_path = os.path.join(get_script_dir(), 'db.json')
    with open(db_path, 'r') as db_file:
        data = json.load(db_file)

    if alias in data:
        username = data[alias]['username']
        password = decrypt(data[alias]['password'], common_password)
        if password:
            print(f"Username: {username}")
            pyperclip.copy(password)
            print("Password copied to clipboard.")
    else:
        print(f"Alias '{alias}' not found.")

# Function to show all available entries
def show_entries():
    db_path = os.path.join(get_script_dir(), 'db.json')
    with open(db_path, 'r') as db_file:
        data = json.load(db_file)

    if data:
        print("Available entries:")
        for alias in data.keys():
            print(f"- {alias}")
    else:
        print("No entries found.")

# Function to export the vault
def export_vault(common_password):
    db_path = os.path.join(get_script_dir(), 'db.json')
    with open(db_path, 'r') as db_file:
        data = json.load(db_file)

    export_path = os.path.join(get_script_dir(), 'exported_vault.json')
    with open(export_path, 'w') as export_file:
        json.dump(data, export_file)
    print(f"Vault exported to: {export_path}")

# Function to import a vault
def import_vault(new_common_password):
    import_path = os.path.join(get_script_dir(), 'exported_vault.json')
    
    if not os.path.exists(import_path):
        print("No exported vault found.")
        return

    with open(import_path, 'r') as import_file:
        data = json.load(import_file)

    db_path = os.path.join(get_script_dir(), 'db.json')
    with open(db_path, 'w') as db_file:
        json.dump({}, db_file)

    for alias, credentials in data.items():
        username = credentials['username']
        password = decrypt(credentials['password'], new_common_password)
        if password:
            add_credentials(alias, username, password, new_common_password)

# Argument parsing
parser = argparse.ArgumentParser(description="A simple AES-based password manager.")
parser.add_argument('--init', help="Initialize a new database vault.", action='store_true')
parser.add_argument('--add', help="Add credentials with alias.", type=str)
parser.add_argument('--get', help="Get credentials by alias.", type=str)
parser.add_argument('--show', help="Show all available entries.", action='store_true')
parser.add_argument('--export', help="Export the current vault to a JSON file.", action='store_true')
parser.add_argument('--import-vault', help="Import a vault from a JSON file.", action='store_true')

# Banner phrase
print("\033[1;32mWelcome to the Phrase CLI Password Manager\033[0m")
print("\033[1;34mBy @Rahim7x\033[0m")
print("\033[1;33mYour secure password management tool!\033[0m")

args = parser.parse_args()

# Main execution logic
try:
    if args.init:
        common_password = input("Enter a common password for the vault: ")
        create_vault(common_password)
    elif args.add:
        alias = args.add
        username = input("Enter the username: ")
        password = input("Enter the password: ")
        common_password = input("Enter the common password for the vault: ")
        add_credentials(alias, username, password, common_password)
    elif args.get:
        alias = args.get
        common_password = input("Enter the common password for the vault: ")
        get_credentials(alias, common_password)
    elif args.show:
        show_entries()
    elif args.export:
        common_password = input("Enter the common password for the vault to export: ")
        export_vault(common_password)
    elif args.import_vault:
        new_common_password = input("Enter a new common password for the vault: ")
        import_vault(new_common_password)
    else:
        print("No flags provided. Use --init to initialize a vault, --add to add credentials, --get to retrieve credentials, --show to list all entries, --export to export the vault, or --import-vault to import a vault.")
except Exception as e:
    print("An error occurred:", e)

